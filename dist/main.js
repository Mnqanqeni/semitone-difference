/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/helper_objects.js":
/*!*******************************!*\
  !*** ./src/helper_objects.js ***!
  \*******************************/
/***/ ((module) => {

eval("const errorMessages = {\n  notTwoElements: \"The input must consist of exactly two elements to be valid.\",\n  notesNotValid:\n    \"The provided notes are not valid. Please refer to the following array for valid notes: ['A', 'A#', 'Bb', 'B', 'C', 'C#', 'Db', 'D', 'D#', 'Eb', 'E', 'F', 'F#', 'Gb', 'G', 'G#'].\",\n  noteDuplicated: \"Each note in the input must be unique and not duplicated.\",\n  distanceOutOfRange:\n    \"The provided answer is out of range. Please input a value from 1 to 11.\",\n  negativeDistance:\n    \"The distance cannot be negative. Please input a non-negative value for the distance.\",\n  mustBeWholeNumber:\n    \"The provided number must be a whole number, e.g., 5, not a decimal number like 5.1.\",\n  onlyDatatypeOfNumber:\n    \"Only the data type 'number' is valid, e.g., 5, not 'five', '5', or {}.\",\n  inharmonicEquivalentNotesError: (note1, note2) =>\n    `${note1} and ${note2} are inharmonic equivalent notes; there is no semitone between them.`,\n};\n\nconst musicalElementsNotesObject = {\n  A: 0,\n  \"A#\": 1,\n  Bb: 1,\n  B: 2,\n  C: 3,\n  \"C#\": 4,\n  Db: 4,\n  D: 5,\n  \"D#\": 6,\n  Eb: 6,\n  E: 7,\n  F: 8,\n  \"F#\": 9,\n  Gb: 9,\n  G: 10,\n  \"G#\": 11,\n  \"Ab\": 11,\n};\n\nmodule.exports = { errorMessages, musicalElementsNotesObject };\n\n\n//# sourceURL=webpack://ndiyakholwa-mnqanqeni-199-semitone-difference-basic-algorithm-javascript/./src/helper_objects.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { JamBuddy } = __webpack_require__(/*! ./jam_buddy */ \"./src/jam_buddy.js\");\nconst confetti = (__webpack_require__(/*! canvas-confetti */ \"./node_modules/canvas-confetti/dist/confetti.module.mjs\")[\"default\"]);\nwindow.confetti = confetti;\n\nconst guiElements = {\n  form: document.getElementById(\"distance-input-form\"),\n  streakElement: document.getElementById(\"streak\"),\n  streakNumberElement: document.getElementById(\"streak-number\"),\n  inputField: document.getElementById(\"input-field\"),\n  restartButton: document.getElementById(\"restart-btn\"),\n  giveUpButton: document.getElementById(\"give-up-btn\"),\n  randomizeButton: document.querySelector(\"#randomize-btn\"),\n  submitButton: document.getElementById(\"submit-btn\"),\n  correctMessage: document.getElementById(\"correctMessage\"),\n  incorrectMessage: document.getElementById(\"incorrectMessage\"),\n  explanation: document.querySelector(\"#explanation\"),\n  answerText: document.querySelector(\"#answer-text\"),\n  mainCounter: document.querySelector(\"#main-counter\"),\n  clockwiseAnswer: document.querySelector(\"#clockwise-answer\"),\n  antiClockwiseAnswer: document.querySelector(\"#anti-clockwise-answer\"),\n  firstNote: document.querySelector(\"#first-note\"),\n  secondNote: document.querySelector(\"#second-note\"),\n  correctMusic:document.getElementById('correct-music'),\n  wrongMusic :document.getElementById('wrong-music'),\n  backgroundMusic:document.getElementById(\"background-music\")\n};\n\nconst jamBuddy = new JamBuddy();\nlet streakCounter = 0;\nlet noteOne, noteTwo;\nlet doCountIntervalId;\n\nconst colorOne = \"#007bff\";\nconst colorTwo = \"#7da2ca\";\nconst enharmonicEquivelantsIndexArray = [1, 4, 6, 9,11];\n\n[noteOne, noteTwo] = initNotes(jamBuddy);\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  restartEventListener();\n  giveUpEventListener();\n  randomizeEventListener();\n  submitEventListener();\n});\n\nfunction restartEventListener() {\n  guiElements.restartButton.addEventListener(\"click\", () => reloadPage(location));\n}\n\nfunction giveUpEventListener() {\n  guiElements.giveUpButton.addEventListener(\"click\", () => {\n    toggleButtons(\"disable\");\n    changeButtonColor(colorTwo);\n    guiElements.inputField.disabled = true;\n    clearTheBoxes(document);\n    doTheExplanation(document, noteOne, noteTwo);\n    streakCounter = 0;\n    updateStrikes(streakCounter);\n  });\n}\n\nfunction randomizeEventListener() {\n  guiElements.randomizeButton.addEventListener(\"click\", () => {\n    guiElements.correctMusic.pause();\n    guiElements.correctMusic.currentTime = 0\n    switchOffAnswerMessages();\n    clearTheBoxes(document);\n    switchOffAnswer(document, noteOne, noteTwo);\n    toggleButtons(\"enable\");\n    changeButtonColor(colorOne);\n    guiElements.inputField.disabled = false;\n    [noteOne, noteTwo] = initNotes(jamBuddy);\n    if (doCountIntervalId) {\n      clearInterval(doCountIntervalId);\n    }\n  });\n}\n\nfunction submitEventListener() {\n  guiElements.form.addEventListener(\"submit\", (event) => {\n    event.preventDefault();\n    const distance = parseInt(guiElements.inputField.value);\n\n    if (isNaN(distance)) {\n      window.alert(\"Input can't be empty\");\n      return;\n    }\n\n    guiElements.inputField.value = \"\";\n\n    switchOffAnswer(document, noteOne, noteTwo);\n\n    if (jamBuddy.checkAnswer(distance)) {\n      const colors = streakCounter > 5 ? ['#ff0000', '#00ff00', '#0000ff'] : ['#007bff', '#ffb700'];\n  \n        window.confetti({\n          particleCount: 100 + streakCounter * 10,\n          spread: 160 + streakCounter * 5,\n          origin: { y: 0.6 },\n          colors: colors,\n        });\n\n      guiElements.correctMusic.play();\n\n      displayAnswerMessage(\"correct\");\n      showAnswer(document, noteOne, noteTwo);\n      streakCounter++;\n      toggleButtons(\"disable\");\n      changeButtonColor(colorTwo);\n      guiElements.inputField.disabled = true;\n      updateStrikes(streakCounter);\n    } else {\n\n      guiElements.wrongMusic.play();\n      displayAnswerMessage(\"incorrect\");\n      streakCounter = 0;\n      updateStrikes(streakCounter);\n    }\n  });\n}\n\nfunction initNotes(jamBuddy) {\n  jamBuddy.randomizeCurrentNotes();\n  const [noteOne, noteTwo] = jamBuddy.getCurrentNotes();\n  guiElements.firstNote.innerText = noteOne;\n  guiElements.secondNote.innerText = noteTwo;\n\n  return [noteOne, noteTwo];\n}\n\nfunction reloadPage(location) {\n  location.href = location.href;\n}\n\nfunction toggleButtons(status) {\n  const isDisabled = status === \"disable\";\n  guiElements.submitButton.disabled = isDisabled;\n  guiElements.giveUpButton.disabled = isDisabled;\n}\n\nfunction changeButtonColor(color) {\n  guiElements.submitButton.style.backgroundColor = color;\n  guiElements.giveUpButton.style.backgroundColor = color;\n}\n\nfunction displayAnswerMessage(status) {\n  guiElements.correctMessage.style.display =\n    status === \"correct\" ? \"block\" : \"none\";\n  guiElements.incorrectMessage.style.display =\n    status === \"incorrect\" ? \"block\" : \"none\";\n}\n\nfunction updateStrikes(streakCounter) {\n  guiElements.streakNumberElement.innerText = streakCounter;\n}\n\nfunction clearTheBoxes(document) {\n  for (let i = 0; i < 12; i++) {\n    if (enharmonicEquivelantsIndexArray.includes(i)) {\n      document.querySelector(`#a${i}a0`).style.backgroundColor = \"#ccc\";\n      document.querySelector(`#a${i}a1`).style.backgroundColor = \"#ccc\";\n    } else {\n      document.querySelector(`#a${i}`).style.backgroundColor = \"#ccc\";\n    }\n  }\n}\n\nfunction switchOffAnswer(document, noteOne, noteTwo) {\n  guiElements.explanation.style.display = \"none\";\n  document.querySelector(\n    `#a${JamBuddy.musicalElements[noteOne]}`\n  ).style.backgroundColor = \"#ccc\";\n  document.querySelector(\n    `#a${JamBuddy.musicalElements[noteTwo]}`\n  ).style.backgroundColor = \"#ccc\";\n}\n\nfunction showAnswer(document) {\n  let noteOne;\n  let noteTwo;\n  [noteOne, noteTwo] = jamBuddy.getCurrentNotes();\n\n  const index1 = JamBuddy.musicalElements[noteOne];\n  const index2 = JamBuddy.musicalElements[noteTwo];\n  guiElements.mainCounter.innerText = \"\";\n  guiElements.explanation.style.display = \"block\";\n  guiElements.answerText.style.display = \"none\";\n\n\n  const getColorSelector = (index, note) =>\n    `#a${index}${\n      enharmonicEquivelantsIndexArray.includes(index) ? `a${note.includes(\"#\") ? \"0\" : \"1\"}` : \"\"\n    }`;\n\n  document.querySelector(\n    getColorSelector(index1, noteOne)\n  ).style.backgroundColor = \"red\";\n  document.querySelector(\n    getColorSelector(index2, noteTwo)\n  ).style.backgroundColor = \"yellow\";\n}\nfunction switchOffAnswerMessages() {\n  guiElements.correctMessage.style.display = \"none\";\n  guiElements.incorrectMessage.style.display = \"none\";\n}\n\nfunction doTheExplanation(document, noteOne, noteTwo) {\n  guiElements.clockwiseAnswer.innerText=\"\";\n  guiElements.antiClockwiseAnswer.innerText=\"\";\n  guiElements.mainCounter.innerText = \"\";\n  showAnswer(document, noteOne, noteTwo);\n  guiElements.answerText.style.display = \"block\";\n\n  let one = JamBuddy.musicalElements[noteOne];\n  let two = JamBuddy.musicalElements[noteTwo];\n\n  [one, two] = one < two ? [one, two] : [two, one];\n\n  doCount(one, two, guiElements.clockwiseAnswer, () => {\n    doCount(two, one, guiElements.antiClockwiseAnswer);\n  });\n}\n\nfunction doCount(num1, num2, id, callback) {\n  let count = 0;\n  const totalNotes = 12;\n\n  doCountIntervalId = setInterval(() => {\n    if (num1 !== num2) {\n      num1 = (num1 + 1) % totalNotes;\n      count++;\n      id.innerText = count;\n      guiElements.mainCounter.innerText = count;\n\n      const element = document.querySelector(`#a${num1}`);\n      const store = element.style.backgroundColor;\n      element.style.backgroundColor = \"blue\";\n      setTimeout(() => {\n        element.style.backgroundColor = store;\n      }, 600);\n    } else {\n      clearInterval(doCountIntervalId);\n      if (typeof callback === \"function\") {\n        callback();\n      }\n      guiElements.mainCounter.innerText = \"\";\n    }\n  }, 900);\n}\n\nmodule.exports = {\n  restartEventListener,\n  giveUpEventListener,\n  randomizeEventListener,\n  submitEventListener,\n  reloadPage,\n  jamBuddy,\n  guiElements,\n};\n\n\n//# sourceURL=webpack://ndiyakholwa-mnqanqeni-199-semitone-difference-basic-algorithm-javascript/./src/index.js?");

/***/ }),

/***/ "./src/jam_buddy.js":
/*!**************************!*\
  !*** ./src/jam_buddy.js ***!
  \**************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { validateDistance, validateNotesArray } = __webpack_require__(/*! ./validate */ \"./src/validate.js\");\nconst { musicalElementsNotesObject } = __webpack_require__(/*! ./helper_objects */ \"./src/helper_objects.js\");\n\nclass JamBuddy {\n  static #musicalElements = musicalElementsNotesObject;\n  #currentNotes = [];\n\n  static get musicalElements() {\n    return this.#musicalElements;\n  }\n\n  getCurrentNotes() {\n    return this.#currentNotes;\n  }\n\n  setCurrentNotes(arrayNotes) {\n    validateNotesArray(arrayNotes, Object.keys(JamBuddy.#musicalElements));\n    this.#currentNotes = arrayNotes;\n  }\n\n  randomizeCurrentNotes() {\n    const tempArray = Object.keys(JamBuddy.#musicalElements);\n    let firstNote, secondNote;\n\n    do {\n      firstNote = getRandomNote(tempArray);\n      secondNote = getRandomNote(tempArray);\n    } while (\n      JamBuddy.#musicalElements[firstNote] ===\n      JamBuddy.#musicalElements[secondNote]\n    );\n\n    this.setCurrentNotes([firstNote, secondNote]);\n  }\n\n  checkAnswer(distance) {\n    validateDistance(distance);\n    const [index1, index2] = getIndexes(this.getCurrentNotes());\n    const totalHarmonicNotes = 12;\n    const absDiff = Math.abs(index1 - index2);\n    const cyclicDistance = [absDiff, totalHarmonicNotes - absDiff];\n    return cyclicDistance.includes(distance);\n  }\n}\n\nfunction getIndexes(currentNotes) {\n  const index1 = musicalElementsNotesObject[currentNotes[0]];\n  const index2 = musicalElementsNotesObject[currentNotes[1]];\n  return [index1, index2];\n}\n\nconst getRandomNote = (arrayOfAllNotes) =>\n  arrayOfAllNotes[Math.floor(Math.random() * arrayOfAllNotes.length)];\n\nmodule.exports = { JamBuddy };\n\n\n//# sourceURL=webpack://ndiyakholwa-mnqanqeni-199-semitone-difference-basic-algorithm-javascript/./src/jam_buddy.js?");

/***/ }),

/***/ "./src/validate.js":
/*!*************************!*\
  !*** ./src/validate.js ***!
  \*************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {\n  errorMessages,\n  musicalElementsNotesObject,\n} = __webpack_require__(/*! ./helper_objects */ \"./src/helper_objects.js\");\nconst maxDistance = 11;\n\nfunction validateNotesArray(arrayNotes, musicalElementsArray) {\n  if (arrayNotes.length !== 2) throw new Error(errorMessages.notTwoElements);\n\n  if (!arrayNotes.every((note) => musicalElementsArray.includes(note)))\n    throw new Error(errorMessages.notesNotValid);\n\n  if (arrayNotes[0] === arrayNotes[1])\n    throw new Error(errorMessages.noteDuplicated);\n\n  if (\n    musicalElementsNotesObject[arrayNotes[0]] ===\n    musicalElementsNotesObject[arrayNotes[1]]\n  ) {\n    throw new Error(\n      errorMessages.inharmonicEquivalentNotesError(arrayNotes[0], arrayNotes[1])\n    );\n  }\n}\n\nfunction validateDistance(distance) {\n  if (typeof distance !== \"number\")\n    throw new Error(errorMessages.onlyDatatypeOfNumber);\n\n  if (!Number.isInteger(distance))\n    throw new Error(errorMessages.mustBeWholeNumber);\n\n  if (distance > maxDistance || distance === 0)\n    throw new Error(errorMessages.distanceOutOfRange);\n\n  if (distance < 0) throw new Error(errorMessages.negativeDistance);\n}\n\nmodule.exports = {\n  validateDistance,\n  validateNotesArray,\n};\n\n\n//# sourceURL=webpack://ndiyakholwa-mnqanqeni-199-semitone-difference-basic-algorithm-javascript/./src/validate.js?");

/***/ }),

/***/ "./node_modules/canvas-confetti/dist/confetti.module.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/canvas-confetti/dist/confetti.module.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// canvas-confetti v1.9.3 built on 2024-04-30T22:19:17.794Z\nvar module = {};\n\n// source content\n/* globals Map */\n\n(function main(global, module, isWorker, workerSize) {\n  var canUseWorker = !!(\n    global.Worker &&\n    global.Blob &&\n    global.Promise &&\n    global.OffscreenCanvas &&\n    global.OffscreenCanvasRenderingContext2D &&\n    global.HTMLCanvasElement &&\n    global.HTMLCanvasElement.prototype.transferControlToOffscreen &&\n    global.URL &&\n    global.URL.createObjectURL);\n\n  var canUsePaths = typeof Path2D === 'function' && typeof DOMMatrix === 'function';\n  var canDrawBitmap = (function () {\n    // this mostly supports ssr\n    if (!global.OffscreenCanvas) {\n      return false;\n    }\n\n    var canvas = new OffscreenCanvas(1, 1);\n    var ctx = canvas.getContext('2d');\n    ctx.fillRect(0, 0, 1, 1);\n    var bitmap = canvas.transferToImageBitmap();\n\n    try {\n      ctx.createPattern(bitmap, 'no-repeat');\n    } catch (e) {\n      return false;\n    }\n\n    return true;\n  })();\n\n  function noop() {}\n\n  // create a promise if it exists, otherwise, just\n  // call the function directly\n  function promise(func) {\n    var ModulePromise = module.exports.Promise;\n    var Prom = ModulePromise !== void 0 ? ModulePromise : global.Promise;\n\n    if (typeof Prom === 'function') {\n      return new Prom(func);\n    }\n\n    func(noop, noop);\n\n    return null;\n  }\n\n  var bitmapMapper = (function (skipTransform, map) {\n    // see https://github.com/catdad/canvas-confetti/issues/209\n    // creating canvases is actually pretty expensive, so we should create a\n    // 1:1 map for bitmap:canvas, so that we can animate the confetti in\n    // a performant manner, but also not store them forever so that we don't\n    // have a memory leak\n    return {\n      transform: function(bitmap) {\n        if (skipTransform) {\n          return bitmap;\n        }\n\n        if (map.has(bitmap)) {\n          return map.get(bitmap);\n        }\n\n        var canvas = new OffscreenCanvas(bitmap.width, bitmap.height);\n        var ctx = canvas.getContext('2d');\n        ctx.drawImage(bitmap, 0, 0);\n\n        map.set(bitmap, canvas);\n\n        return canvas;\n      },\n      clear: function () {\n        map.clear();\n      }\n    };\n  })(canDrawBitmap, new Map());\n\n  var raf = (function () {\n    var TIME = Math.floor(1000 / 60);\n    var frame, cancel;\n    var frames = {};\n    var lastFrameTime = 0;\n\n    if (typeof requestAnimationFrame === 'function' && typeof cancelAnimationFrame === 'function') {\n      frame = function (cb) {\n        var id = Math.random();\n\n        frames[id] = requestAnimationFrame(function onFrame(time) {\n          if (lastFrameTime === time || lastFrameTime + TIME - 1 < time) {\n            lastFrameTime = time;\n            delete frames[id];\n\n            cb();\n          } else {\n            frames[id] = requestAnimationFrame(onFrame);\n          }\n        });\n\n        return id;\n      };\n      cancel = function (id) {\n        if (frames[id]) {\n          cancelAnimationFrame(frames[id]);\n        }\n      };\n    } else {\n      frame = function (cb) {\n        return setTimeout(cb, TIME);\n      };\n      cancel = function (timer) {\n        return clearTimeout(timer);\n      };\n    }\n\n    return { frame: frame, cancel: cancel };\n  }());\n\n  var getWorker = (function () {\n    var worker;\n    var prom;\n    var resolves = {};\n\n    function decorate(worker) {\n      function execute(options, callback) {\n        worker.postMessage({ options: options || {}, callback: callback });\n      }\n      worker.init = function initWorker(canvas) {\n        var offscreen = canvas.transferControlToOffscreen();\n        worker.postMessage({ canvas: offscreen }, [offscreen]);\n      };\n\n      worker.fire = function fireWorker(options, size, done) {\n        if (prom) {\n          execute(options, null);\n          return prom;\n        }\n\n        var id = Math.random().toString(36).slice(2);\n\n        prom = promise(function (resolve) {\n          function workerDone(msg) {\n            if (msg.data.callback !== id) {\n              return;\n            }\n\n            delete resolves[id];\n            worker.removeEventListener('message', workerDone);\n\n            prom = null;\n\n            bitmapMapper.clear();\n\n            done();\n            resolve();\n          }\n\n          worker.addEventListener('message', workerDone);\n          execute(options, id);\n\n          resolves[id] = workerDone.bind(null, { data: { callback: id }});\n        });\n\n        return prom;\n      };\n\n      worker.reset = function resetWorker() {\n        worker.postMessage({ reset: true });\n\n        for (var id in resolves) {\n          resolves[id]();\n          delete resolves[id];\n        }\n      };\n    }\n\n    return function () {\n      if (worker) {\n        return worker;\n      }\n\n      if (!isWorker && canUseWorker) {\n        var code = [\n          'var CONFETTI, SIZE = {}, module = {};',\n          '(' + main.toString() + ')(this, module, true, SIZE);',\n          'onmessage = function(msg) {',\n          '  if (msg.data.options) {',\n          '    CONFETTI(msg.data.options).then(function () {',\n          '      if (msg.data.callback) {',\n          '        postMessage({ callback: msg.data.callback });',\n          '      }',\n          '    });',\n          '  } else if (msg.data.reset) {',\n          '    CONFETTI && CONFETTI.reset();',\n          '  } else if (msg.data.resize) {',\n          '    SIZE.width = msg.data.resize.width;',\n          '    SIZE.height = msg.data.resize.height;',\n          '  } else if (msg.data.canvas) {',\n          '    SIZE.width = msg.data.canvas.width;',\n          '    SIZE.height = msg.data.canvas.height;',\n          '    CONFETTI = module.exports.create(msg.data.canvas);',\n          '  }',\n          '}',\n        ].join('\\n');\n        try {\n          worker = new Worker(URL.createObjectURL(new Blob([code])));\n        } catch (e) {\n          // eslint-disable-next-line no-console\n          typeof console !== undefined && typeof console.warn === 'function' ? console.warn('🎊 Could not load worker', e) : null;\n\n          return null;\n        }\n\n        decorate(worker);\n      }\n\n      return worker;\n    };\n  })();\n\n  var defaults = {\n    particleCount: 50,\n    angle: 90,\n    spread: 45,\n    startVelocity: 45,\n    decay: 0.9,\n    gravity: 1,\n    drift: 0,\n    ticks: 200,\n    x: 0.5,\n    y: 0.5,\n    shapes: ['square', 'circle'],\n    zIndex: 100,\n    colors: [\n      '#26ccff',\n      '#a25afd',\n      '#ff5e7e',\n      '#88ff5a',\n      '#fcff42',\n      '#ffa62d',\n      '#ff36ff'\n    ],\n    // probably should be true, but back-compat\n    disableForReducedMotion: false,\n    scalar: 1\n  };\n\n  function convert(val, transform) {\n    return transform ? transform(val) : val;\n  }\n\n  function isOk(val) {\n    return !(val === null || val === undefined);\n  }\n\n  function prop(options, name, transform) {\n    return convert(\n      options && isOk(options[name]) ? options[name] : defaults[name],\n      transform\n    );\n  }\n\n  function onlyPositiveInt(number){\n    return number < 0 ? 0 : Math.floor(number);\n  }\n\n  function randomInt(min, max) {\n    // [min, max)\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n\n  function toDecimal(str) {\n    return parseInt(str, 16);\n  }\n\n  function colorsToRgb(colors) {\n    return colors.map(hexToRgb);\n  }\n\n  function hexToRgb(str) {\n    var val = String(str).replace(/[^0-9a-f]/gi, '');\n\n    if (val.length < 6) {\n        val = val[0]+val[0]+val[1]+val[1]+val[2]+val[2];\n    }\n\n    return {\n      r: toDecimal(val.substring(0,2)),\n      g: toDecimal(val.substring(2,4)),\n      b: toDecimal(val.substring(4,6))\n    };\n  }\n\n  function getOrigin(options) {\n    var origin = prop(options, 'origin', Object);\n    origin.x = prop(origin, 'x', Number);\n    origin.y = prop(origin, 'y', Number);\n\n    return origin;\n  }\n\n  function setCanvasWindowSize(canvas) {\n    canvas.width = document.documentElement.clientWidth;\n    canvas.height = document.documentElement.clientHeight;\n  }\n\n  function setCanvasRectSize(canvas) {\n    var rect = canvas.getBoundingClientRect();\n    canvas.width = rect.width;\n    canvas.height = rect.height;\n  }\n\n  function getCanvas(zIndex) {\n    var canvas = document.createElement('canvas');\n\n    canvas.style.position = 'fixed';\n    canvas.style.top = '0px';\n    canvas.style.left = '0px';\n    canvas.style.pointerEvents = 'none';\n    canvas.style.zIndex = zIndex;\n\n    return canvas;\n  }\n\n  function ellipse(context, x, y, radiusX, radiusY, rotation, startAngle, endAngle, antiClockwise) {\n    context.save();\n    context.translate(x, y);\n    context.rotate(rotation);\n    context.scale(radiusX, radiusY);\n    context.arc(0, 0, 1, startAngle, endAngle, antiClockwise);\n    context.restore();\n  }\n\n  function randomPhysics(opts) {\n    var radAngle = opts.angle * (Math.PI / 180);\n    var radSpread = opts.spread * (Math.PI / 180);\n\n    return {\n      x: opts.x,\n      y: opts.y,\n      wobble: Math.random() * 10,\n      wobbleSpeed: Math.min(0.11, Math.random() * 0.1 + 0.05),\n      velocity: (opts.startVelocity * 0.5) + (Math.random() * opts.startVelocity),\n      angle2D: -radAngle + ((0.5 * radSpread) - (Math.random() * radSpread)),\n      tiltAngle: (Math.random() * (0.75 - 0.25) + 0.25) * Math.PI,\n      color: opts.color,\n      shape: opts.shape,\n      tick: 0,\n      totalTicks: opts.ticks,\n      decay: opts.decay,\n      drift: opts.drift,\n      random: Math.random() + 2,\n      tiltSin: 0,\n      tiltCos: 0,\n      wobbleX: 0,\n      wobbleY: 0,\n      gravity: opts.gravity * 3,\n      ovalScalar: 0.6,\n      scalar: opts.scalar,\n      flat: opts.flat\n    };\n  }\n\n  function updateFetti(context, fetti) {\n    fetti.x += Math.cos(fetti.angle2D) * fetti.velocity + fetti.drift;\n    fetti.y += Math.sin(fetti.angle2D) * fetti.velocity + fetti.gravity;\n    fetti.velocity *= fetti.decay;\n\n    if (fetti.flat) {\n      fetti.wobble = 0;\n      fetti.wobbleX = fetti.x + (10 * fetti.scalar);\n      fetti.wobbleY = fetti.y + (10 * fetti.scalar);\n\n      fetti.tiltSin = 0;\n      fetti.tiltCos = 0;\n      fetti.random = 1;\n    } else {\n      fetti.wobble += fetti.wobbleSpeed;\n      fetti.wobbleX = fetti.x + ((10 * fetti.scalar) * Math.cos(fetti.wobble));\n      fetti.wobbleY = fetti.y + ((10 * fetti.scalar) * Math.sin(fetti.wobble));\n\n      fetti.tiltAngle += 0.1;\n      fetti.tiltSin = Math.sin(fetti.tiltAngle);\n      fetti.tiltCos = Math.cos(fetti.tiltAngle);\n      fetti.random = Math.random() + 2;\n    }\n\n    var progress = (fetti.tick++) / fetti.totalTicks;\n\n    var x1 = fetti.x + (fetti.random * fetti.tiltCos);\n    var y1 = fetti.y + (fetti.random * fetti.tiltSin);\n    var x2 = fetti.wobbleX + (fetti.random * fetti.tiltCos);\n    var y2 = fetti.wobbleY + (fetti.random * fetti.tiltSin);\n\n    context.fillStyle = 'rgba(' + fetti.color.r + ', ' + fetti.color.g + ', ' + fetti.color.b + ', ' + (1 - progress) + ')';\n\n    context.beginPath();\n\n    if (canUsePaths && fetti.shape.type === 'path' && typeof fetti.shape.path === 'string' && Array.isArray(fetti.shape.matrix)) {\n      context.fill(transformPath2D(\n        fetti.shape.path,\n        fetti.shape.matrix,\n        fetti.x,\n        fetti.y,\n        Math.abs(x2 - x1) * 0.1,\n        Math.abs(y2 - y1) * 0.1,\n        Math.PI / 10 * fetti.wobble\n      ));\n    } else if (fetti.shape.type === 'bitmap') {\n      var rotation = Math.PI / 10 * fetti.wobble;\n      var scaleX = Math.abs(x2 - x1) * 0.1;\n      var scaleY = Math.abs(y2 - y1) * 0.1;\n      var width = fetti.shape.bitmap.width * fetti.scalar;\n      var height = fetti.shape.bitmap.height * fetti.scalar;\n\n      var matrix = new DOMMatrix([\n        Math.cos(rotation) * scaleX,\n        Math.sin(rotation) * scaleX,\n        -Math.sin(rotation) * scaleY,\n        Math.cos(rotation) * scaleY,\n        fetti.x,\n        fetti.y\n      ]);\n\n      // apply the transform matrix from the confetti shape\n      matrix.multiplySelf(new DOMMatrix(fetti.shape.matrix));\n\n      var pattern = context.createPattern(bitmapMapper.transform(fetti.shape.bitmap), 'no-repeat');\n      pattern.setTransform(matrix);\n\n      context.globalAlpha = (1 - progress);\n      context.fillStyle = pattern;\n      context.fillRect(\n        fetti.x - (width / 2),\n        fetti.y - (height / 2),\n        width,\n        height\n      );\n      context.globalAlpha = 1;\n    } else if (fetti.shape === 'circle') {\n      context.ellipse ?\n        context.ellipse(fetti.x, fetti.y, Math.abs(x2 - x1) * fetti.ovalScalar, Math.abs(y2 - y1) * fetti.ovalScalar, Math.PI / 10 * fetti.wobble, 0, 2 * Math.PI) :\n        ellipse(context, fetti.x, fetti.y, Math.abs(x2 - x1) * fetti.ovalScalar, Math.abs(y2 - y1) * fetti.ovalScalar, Math.PI / 10 * fetti.wobble, 0, 2 * Math.PI);\n    } else if (fetti.shape === 'star') {\n      var rot = Math.PI / 2 * 3;\n      var innerRadius = 4 * fetti.scalar;\n      var outerRadius = 8 * fetti.scalar;\n      var x = fetti.x;\n      var y = fetti.y;\n      var spikes = 5;\n      var step = Math.PI / spikes;\n\n      while (spikes--) {\n        x = fetti.x + Math.cos(rot) * outerRadius;\n        y = fetti.y + Math.sin(rot) * outerRadius;\n        context.lineTo(x, y);\n        rot += step;\n\n        x = fetti.x + Math.cos(rot) * innerRadius;\n        y = fetti.y + Math.sin(rot) * innerRadius;\n        context.lineTo(x, y);\n        rot += step;\n      }\n    } else {\n      context.moveTo(Math.floor(fetti.x), Math.floor(fetti.y));\n      context.lineTo(Math.floor(fetti.wobbleX), Math.floor(y1));\n      context.lineTo(Math.floor(x2), Math.floor(y2));\n      context.lineTo(Math.floor(x1), Math.floor(fetti.wobbleY));\n    }\n\n    context.closePath();\n    context.fill();\n\n    return fetti.tick < fetti.totalTicks;\n  }\n\n  function animate(canvas, fettis, resizer, size, done) {\n    var animatingFettis = fettis.slice();\n    var context = canvas.getContext('2d');\n    var animationFrame;\n    var destroy;\n\n    var prom = promise(function (resolve) {\n      function onDone() {\n        animationFrame = destroy = null;\n\n        context.clearRect(0, 0, size.width, size.height);\n        bitmapMapper.clear();\n\n        done();\n        resolve();\n      }\n\n      function update() {\n        if (isWorker && !(size.width === workerSize.width && size.height === workerSize.height)) {\n          size.width = canvas.width = workerSize.width;\n          size.height = canvas.height = workerSize.height;\n        }\n\n        if (!size.width && !size.height) {\n          resizer(canvas);\n          size.width = canvas.width;\n          size.height = canvas.height;\n        }\n\n        context.clearRect(0, 0, size.width, size.height);\n\n        animatingFettis = animatingFettis.filter(function (fetti) {\n          return updateFetti(context, fetti);\n        });\n\n        if (animatingFettis.length) {\n          animationFrame = raf.frame(update);\n        } else {\n          onDone();\n        }\n      }\n\n      animationFrame = raf.frame(update);\n      destroy = onDone;\n    });\n\n    return {\n      addFettis: function (fettis) {\n        animatingFettis = animatingFettis.concat(fettis);\n\n        return prom;\n      },\n      canvas: canvas,\n      promise: prom,\n      reset: function () {\n        if (animationFrame) {\n          raf.cancel(animationFrame);\n        }\n\n        if (destroy) {\n          destroy();\n        }\n      }\n    };\n  }\n\n  function confettiCannon(canvas, globalOpts) {\n    var isLibCanvas = !canvas;\n    var allowResize = !!prop(globalOpts || {}, 'resize');\n    var hasResizeEventRegistered = false;\n    var globalDisableForReducedMotion = prop(globalOpts, 'disableForReducedMotion', Boolean);\n    var shouldUseWorker = canUseWorker && !!prop(globalOpts || {}, 'useWorker');\n    var worker = shouldUseWorker ? getWorker() : null;\n    var resizer = isLibCanvas ? setCanvasWindowSize : setCanvasRectSize;\n    var initialized = (canvas && worker) ? !!canvas.__confetti_initialized : false;\n    var preferLessMotion = typeof matchMedia === 'function' && matchMedia('(prefers-reduced-motion)').matches;\n    var animationObj;\n\n    function fireLocal(options, size, done) {\n      var particleCount = prop(options, 'particleCount', onlyPositiveInt);\n      var angle = prop(options, 'angle', Number);\n      var spread = prop(options, 'spread', Number);\n      var startVelocity = prop(options, 'startVelocity', Number);\n      var decay = prop(options, 'decay', Number);\n      var gravity = prop(options, 'gravity', Number);\n      var drift = prop(options, 'drift', Number);\n      var colors = prop(options, 'colors', colorsToRgb);\n      var ticks = prop(options, 'ticks', Number);\n      var shapes = prop(options, 'shapes');\n      var scalar = prop(options, 'scalar');\n      var flat = !!prop(options, 'flat');\n      var origin = getOrigin(options);\n\n      var temp = particleCount;\n      var fettis = [];\n\n      var startX = canvas.width * origin.x;\n      var startY = canvas.height * origin.y;\n\n      while (temp--) {\n        fettis.push(\n          randomPhysics({\n            x: startX,\n            y: startY,\n            angle: angle,\n            spread: spread,\n            startVelocity: startVelocity,\n            color: colors[temp % colors.length],\n            shape: shapes[randomInt(0, shapes.length)],\n            ticks: ticks,\n            decay: decay,\n            gravity: gravity,\n            drift: drift,\n            scalar: scalar,\n            flat: flat\n          })\n        );\n      }\n\n      // if we have a previous canvas already animating,\n      // add to it\n      if (animationObj) {\n        return animationObj.addFettis(fettis);\n      }\n\n      animationObj = animate(canvas, fettis, resizer, size , done);\n\n      return animationObj.promise;\n    }\n\n    function fire(options) {\n      var disableForReducedMotion = globalDisableForReducedMotion || prop(options, 'disableForReducedMotion', Boolean);\n      var zIndex = prop(options, 'zIndex', Number);\n\n      if (disableForReducedMotion && preferLessMotion) {\n        return promise(function (resolve) {\n          resolve();\n        });\n      }\n\n      if (isLibCanvas && animationObj) {\n        // use existing canvas from in-progress animation\n        canvas = animationObj.canvas;\n      } else if (isLibCanvas && !canvas) {\n        // create and initialize a new canvas\n        canvas = getCanvas(zIndex);\n        document.body.appendChild(canvas);\n      }\n\n      if (allowResize && !initialized) {\n        // initialize the size of a user-supplied canvas\n        resizer(canvas);\n      }\n\n      var size = {\n        width: canvas.width,\n        height: canvas.height\n      };\n\n      if (worker && !initialized) {\n        worker.init(canvas);\n      }\n\n      initialized = true;\n\n      if (worker) {\n        canvas.__confetti_initialized = true;\n      }\n\n      function onResize() {\n        if (worker) {\n          // TODO this really shouldn't be immediate, because it is expensive\n          var obj = {\n            getBoundingClientRect: function () {\n              if (!isLibCanvas) {\n                return canvas.getBoundingClientRect();\n              }\n            }\n          };\n\n          resizer(obj);\n\n          worker.postMessage({\n            resize: {\n              width: obj.width,\n              height: obj.height\n            }\n          });\n          return;\n        }\n\n        // don't actually query the size here, since this\n        // can execute frequently and rapidly\n        size.width = size.height = null;\n      }\n\n      function done() {\n        animationObj = null;\n\n        if (allowResize) {\n          hasResizeEventRegistered = false;\n          global.removeEventListener('resize', onResize);\n        }\n\n        if (isLibCanvas && canvas) {\n          if (document.body.contains(canvas)) {\n            document.body.removeChild(canvas); \n          }\n          canvas = null;\n          initialized = false;\n        }\n      }\n\n      if (allowResize && !hasResizeEventRegistered) {\n        hasResizeEventRegistered = true;\n        global.addEventListener('resize', onResize, false);\n      }\n\n      if (worker) {\n        return worker.fire(options, size, done);\n      }\n\n      return fireLocal(options, size, done);\n    }\n\n    fire.reset = function () {\n      if (worker) {\n        worker.reset();\n      }\n\n      if (animationObj) {\n        animationObj.reset();\n      }\n    };\n\n    return fire;\n  }\n\n  // Make default export lazy to defer worker creation until called.\n  var defaultFire;\n  function getDefaultFire() {\n    if (!defaultFire) {\n      defaultFire = confettiCannon(null, { useWorker: true, resize: true });\n    }\n    return defaultFire;\n  }\n\n  function transformPath2D(pathString, pathMatrix, x, y, scaleX, scaleY, rotation) {\n    var path2d = new Path2D(pathString);\n\n    var t1 = new Path2D();\n    t1.addPath(path2d, new DOMMatrix(pathMatrix));\n\n    var t2 = new Path2D();\n    // see https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix/DOMMatrix\n    t2.addPath(t1, new DOMMatrix([\n      Math.cos(rotation) * scaleX,\n      Math.sin(rotation) * scaleX,\n      -Math.sin(rotation) * scaleY,\n      Math.cos(rotation) * scaleY,\n      x,\n      y\n    ]));\n\n    return t2;\n  }\n\n  function shapeFromPath(pathData) {\n    if (!canUsePaths) {\n      throw new Error('path confetti are not supported in this browser');\n    }\n\n    var path, matrix;\n\n    if (typeof pathData === 'string') {\n      path = pathData;\n    } else {\n      path = pathData.path;\n      matrix = pathData.matrix;\n    }\n\n    var path2d = new Path2D(path);\n    var tempCanvas = document.createElement('canvas');\n    var tempCtx = tempCanvas.getContext('2d');\n\n    if (!matrix) {\n      // attempt to figure out the width of the path, up to 1000x1000\n      var maxSize = 1000;\n      var minX = maxSize;\n      var minY = maxSize;\n      var maxX = 0;\n      var maxY = 0;\n      var width, height;\n\n      // do some line skipping... this is faster than checking\n      // every pixel and will be mostly still correct\n      for (var x = 0; x < maxSize; x += 2) {\n        for (var y = 0; y < maxSize; y += 2) {\n          if (tempCtx.isPointInPath(path2d, x, y, 'nonzero')) {\n            minX = Math.min(minX, x);\n            minY = Math.min(minY, y);\n            maxX = Math.max(maxX, x);\n            maxY = Math.max(maxY, y);\n          }\n        }\n      }\n\n      width = maxX - minX;\n      height = maxY - minY;\n\n      var maxDesiredSize = 10;\n      var scale = Math.min(maxDesiredSize/width, maxDesiredSize/height);\n\n      matrix = [\n        scale, 0, 0, scale,\n        -Math.round((width/2) + minX) * scale,\n        -Math.round((height/2) + minY) * scale\n      ];\n    }\n\n    return {\n      type: 'path',\n      path: path,\n      matrix: matrix\n    };\n  }\n\n  function shapeFromText(textData) {\n    var text,\n        scalar = 1,\n        color = '#000000',\n        // see https://nolanlawson.com/2022/04/08/the-struggle-of-using-native-emoji-on-the-web/\n        fontFamily = '\"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\", \"EmojiOne Color\", \"Android Emoji\", \"Twemoji Mozilla\", \"system emoji\", sans-serif';\n\n    if (typeof textData === 'string') {\n      text = textData;\n    } else {\n      text = textData.text;\n      scalar = 'scalar' in textData ? textData.scalar : scalar;\n      fontFamily = 'fontFamily' in textData ? textData.fontFamily : fontFamily;\n      color = 'color' in textData ? textData.color : color;\n    }\n\n    // all other confetti are 10 pixels,\n    // so this pixel size is the de-facto 100% scale confetti\n    var fontSize = 10 * scalar;\n    var font = '' + fontSize + 'px ' + fontFamily;\n\n    var canvas = new OffscreenCanvas(fontSize, fontSize);\n    var ctx = canvas.getContext('2d');\n\n    ctx.font = font;\n    var size = ctx.measureText(text);\n    var width = Math.ceil(size.actualBoundingBoxRight + size.actualBoundingBoxLeft);\n    var height = Math.ceil(size.actualBoundingBoxAscent + size.actualBoundingBoxDescent);\n\n    var padding = 2;\n    var x = size.actualBoundingBoxLeft + padding;\n    var y = size.actualBoundingBoxAscent + padding;\n    width += padding + padding;\n    height += padding + padding;\n\n    canvas = new OffscreenCanvas(width, height);\n    ctx = canvas.getContext('2d');\n    ctx.font = font;\n    ctx.fillStyle = color;\n\n    ctx.fillText(text, x, y);\n\n    var scale = 1 / scalar;\n\n    return {\n      type: 'bitmap',\n      // TODO these probably need to be transfered for workers\n      bitmap: canvas.transferToImageBitmap(),\n      matrix: [scale, 0, 0, scale, -width * scale / 2, -height * scale / 2]\n    };\n  }\n\n  module.exports = function() {\n    return getDefaultFire().apply(this, arguments);\n  };\n  module.exports.reset = function() {\n    getDefaultFire().reset();\n  };\n  module.exports.create = confettiCannon;\n  module.exports.shapeFromPath = shapeFromPath;\n  module.exports.shapeFromText = shapeFromText;\n}((function () {\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n\n  return this || {};\n})(), module, false));\n\n// end source content\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (module.exports);\nvar create = module.exports.create;\n\n\n//# sourceURL=webpack://ndiyakholwa-mnqanqeni-199-semitone-difference-basic-algorithm-javascript/./node_modules/canvas-confetti/dist/confetti.module.mjs?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;